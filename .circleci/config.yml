version: 2.1

commands:
  configure-git:
    steps:
      - run:
          name: Configure GIT with user info for pushing
          command: |
            git config user.name "$GITHUB_USERNAME"
            git config user.email "$GITHUB_EMAIL"

  deploy-rpm:
    parameters:
      username:
        type: string
      password:
        type: string
      serverurl:
        type: string
      repository-name:
        type: string
    steps:
      - run:
          name: Deploy .rpm to a Yum repository
          command: |
            echo "Running deploy-rpm: ${RPM_NAME} to: << parameters.serverurl >><< parameters.repository-name >>"
            curl -v --user << parameters.username >>:<< parameters.password >> --upload-file build/${RPM_NAME} << parameters.serverurl >><< parameters.repository-name >>/
            res=$?
            if test "$res" != "0"; then
              echo "the yum curl command failed with: $res"
              exit 1
            fi

  deploy-rpm-staging:
    parameters:
      username:
        type: string
        default: $NEXUS_RM_USERNAME_YUM_STAGING
      password:
        type: string
        default: $NEXUS_RM_PASSWORD_YUM_STAGING
      serverurl:
        type: string
        default: $NEXUS_RM_SERVERURL_STAGING
      repository-name:
        type: string
        default: $REPOSITORY_NAME_YUM_STAGING
    steps:
      - deploy-rpm:
          username: << parameters.username >>
          password: << parameters.password >>
          serverurl: << parameters.serverurl >>
          repository-name: << parameters.repository-name >>

  deploy-rpm-production:
    parameters:
      username:
        type: string
        default: $NEXUS_RM_USERNAME_YUM_PRODUCTION
      password:
        type: string
        default: $NEXUS_RM_PASSWORD_YUM_PRODUCTION
      serverurl:
        type: string
        default: $NEXUS_RM_SERVERURL_PRODUCTION
      repository-name:
        type: string
        default: $REPOSITORY_NAME_YUM_PRODUCTION
    steps:
      - deploy-rpm:
          username: << parameters.username >>
          password: << parameters.password >>
          serverurl: << parameters.serverurl >>
          repository-name: << parameters.repository-name >>

  deploy-deb:
    parameters:
      username:
        type: string
      password:
        type: string
      serverurl:
        type: string
      repository-name:
        type: string
    steps:
      - run:
          name: Deploy .deb to an Apt repository
          command: |
            echo "Running deploy-deb: ${DEB_NAME} to: << parameters.serverurl >><< parameters.repository-name >>"
            curl -v --user << parameters.username >>:<< parameters.password >> -H "Content-Type: multipart/form-data" --data-binary "@build/${DEB_NAME}" << parameters.serverurl >><< parameters.repository-name >>/
            res=$?
            if test "$res" != "0"; then
              echo "the apt curl command failed with: $res"
              exit 2
            fi

  deploy-deb-staging:
    parameters:
      username:
        type: string
        default: $NEXUS_RM_USERNAME_APT_STAGING
      password:
        type: string
        default: $NEXUS_RM_PASSWORD_APT_STAGING
      serverurl:
        type: string
        default: $NEXUS_RM_SERVERURL_STAGING
      repository-name:
        type: string
        default: $REPOSITORY_NAME_APT_STAGING
    steps:
      - deploy-deb:
          username: << parameters.username >>
          password: << parameters.password >>
          serverurl: << parameters.serverurl >>
          repository-name: << parameters.repository-name >>

  deploy-deb-production:
    parameters:
      username:
        type: string
        default: $NEXUS_RM_USERNAME_APT_PRODUCTION
      password:
        type: string
        default: $NEXUS_RM_PASSWORD_APT_PRODUCTION
      serverurl:
        type: string
        default: $NEXUS_RM_SERVERURL_PRODUCTION
      repository-name:
        type: string
        default: $REPOSITORY_NAME_APT_PRODUCTION
    steps:
      - deploy-deb:
          username: << parameters.username >>
          password: << parameters.password >>
          serverurl: << parameters.serverurl >>
          repository-name: << parameters.repository-name >>


jobs:
  build:
    docker:
      - image: circleci/openjdk:8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build RPM and DEB
          command: |
            if [[ $CIRCLE_SHELL_ENV == *"localbuild"* ]]; then
              echo "This is a local build. Enabling sudo for docker"
              echo sudo > ~/sudo
            else
              echo "This is not a local build. Disabling sudo for docker"
              touch ~/sudo
            fi
            eval `cat ~/sudo` make docker-all
            export RPM_NAME=`make show-rpm-name`
            export DEB_NAME=`make show-deb-name`
            echo RPM_NAME: $RPM_NAME
            echo DEB_NAME: $DEB_NAME
            echo export RPM_NAME="${RPM_NAME}" >> "$BASH_ENV"
            echo export DEB_NAME="${DEB_NAME}" >> "$BASH_ENV"

  build_and_deploy:
    docker:
      - image: circleci/openjdk:8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build RPM and DEB then deploy
          command: |
            if [[ $CIRCLE_SHELL_ENV == *"localbuild"* ]]; then
              echo "This is a local build. Enabling sudo for docker"
              echo sudo > ~/sudo
            else
              echo "This is not a local build. Disabling sudo for docker"
              touch ~/sudo
            fi
            export GNUPGHOME=./build/rpm-signing-keys/uhome
            eval `cat ~/sudo` make docker-all SIGN_RPM=true GNUPGHOME="${GNUPGHOME}" SECRING_GPG_ASC_BASE64="${SECRING_GPG_ASC_BASE64}" GPG_KEY_EMAIL="${GPG_KEY_EMAIL}" GPG_PASSPHRASE="${GPG_PASSPHRASE}"
            export RPM_NAME=`make show-rpm-name`
            export DEB_NAME=`make show-deb-name`
            echo RPM_NAME: $RPM_NAME
            echo DEB_NAME: $DEB_NAME
            echo export RPM_NAME="${RPM_NAME}" >> "$BASH_ENV"
            echo export DEB_NAME="${DEB_NAME}" >> "$BASH_ENV"

      - deploy-rpm-staging
      - deploy-deb-staging
      - deploy-rpm-production
      - deploy-deb-production

  read_published_release_version:
    docker:
      - image: circleci/openjdk:8
    parameters:
      ssh-fingerprints:
        type: string
    steps:
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh-fingerprints>>
      - checkout
      - configure-git
      - run:
          name: Check published version
          command: |
            # extract latest published release version
            VERSION_LATEST=$(curl -sI https://download.sonatype.com/nexus/3/latest-unix.tar.gz -w "%{redirect_url}" | tail -1 | sed 's/.*nexus-\(.*\)-unix.*/\1/')

            if [ "x${VERSION_LATEST}" = "x" ]
            then
              echo "Failed to determine latest version.."
              exit 1
            fi

            echo "VERSION_LATEST: $VERSION_LATEST"

            VERSION_BUILT=`cat version-to-build.txt`
            echo "VERSION_BUILT: $VERSION_BUILT"
            if [ "$VERSION_LATEST" = "$VERSION_BUILT" ]
            then
              echo "No action required, installer $VERSION_BUILT is up to date."
            else
              echo "Stale version detected: $VERSION_BUILT. New Nexus Installer ($VERSION_LATEST) needs to be built and published."
              # write new version to build to disk, commit with trigger tag, and push changes to git
              echo "$VERSION_LATEST" > version-to-build.txt
              git commit version-to-build.txt -m "[skip ci] Automated update to build new version: $VERSION_LATEST"
              git tag "build_new_version_$VERSION_LATEST" -m "Tag to trigger automated build of new version: $VERSION_LATEST"
              git push && git push --tags
              exit 1
            fi

workflows:
  manual_deploy:
    jobs:
      - build
      - hold:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - build_and_deploy:
          context: installer-deploy
          requires:
            - hold
          filters:
            branches:
              only:
                - master

  check_for_new_release:
    triggers:
      - schedule:
          cron: "5 20 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - read_published_release_version:
          ssh-fingerprints: "25:b0:d0:3a:48:c9:02:01:66:d3:ae:3b:bb:b8:42:4a"
          context: installer-read-published-release-version

  build_new_release_on_tag:
    jobs:
      - build:
          filters:
            # ignore any commit on any branch by default (branch and tag filters are ORed)
            branches:
              ignore: /.*/
            # required since `build_and_deploy` has tag filters AND requires `build`
            tags:
              only: /.*/
      - build_and_deploy:
          context: installer-deploy
          filters:
            # ignore any commit on any branch by default (branch and tag filters are ORed)
            branches:
              ignore: /.*/
            tags:
              only: /^build_new_version_.*/
          requires:
            - build

